"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const user_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/user"));
const Mail_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Addons/Mail"));
const UserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/UserValidator"));
class AuthController {
    async register({ request, response }) {
        try {
            const data = await request.validate(UserValidator_1.default);
            const code = Math.floor(1000 + Math.random() * 9000);
            data.otp = code.toString();
            data.is_verified = 0;
            await user_1.default.create(data);
            await Mail_1.default.send((message) => {
                message
                    .from('info@example.com')
                    .to(data.email)
                    .subject('OTP Verification!')
                    .htmlView('otp_verif', { code });
            });
            return response.created({ message: 'Berhasil Register, Segera periksa email anda!' });
        }
        catch (error) {
            return response.unprocessableEntity({ message: error.message });
        }
    }
    async login({ request, response, auth }) {
        try {
            const email = request.input('email');
            const password = request.input('password');
            console.log('token');
            const token = await auth.use('api').attempt(email, password);
            return response.ok({ message: 'login sukses', token: token });
        }
        catch (error) {
            return response.badRequest({ message: error.message });
        }
    }
    async otp_verification({ request, response }) {
        try {
            const otpUser = request.input('otp');
            const dataUser = await Database_1.default.from('users').select('*').where({ id: request.input('user_id') });
            if (otpUser === dataUser[0].otp) {
                dataUser[0].is_verified = 1;
                console.log(dataUser[0]);
                await user_1.default
                    .query()
                    .where('id', request.input('user_id'))
                    .update(dataUser[0]);
                return response.ok({ message: 'Verifikasi Berhasil' });
            }
            else {
                return response.badRequest({ message: 'Verifikasi Gagal' });
            }
        }
        catch (error) {
            return response.badRequest({ message: error.message });
        }
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJGQUFrRDtBQUNsRCxpRkFBbUM7QUFDbkMsb0ZBQTBDO0FBRzFDLHVHQUF3RDtBQUV4RCxNQUFxQixjQUFjO0lBQ3hCLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUMsUUFBUSxFQUF1QjtRQUMxRCxJQUFJO1lBQ0EsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLHVCQUFhLENBQUMsQ0FBQztZQUNuRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDckIsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXhCLE1BQU0sY0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUN4QixPQUFPO3FCQUNKLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztxQkFDeEIsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7cUJBQ2QsT0FBTyxDQUFDLG1CQUFtQixDQUFDO3FCQUM1QixRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQTtZQUFBLENBQUMsQUFBRCxDQUFDLENBQUM7WUFDdEMsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUMsT0FBTyxFQUFDLCtDQUErQyxFQUFDLENBQUMsQ0FBQztTQUN0RjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUMsbUJBQW1CLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUE7U0FDaEU7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFzQjtRQUM1RCxJQUFJO1lBQ0EsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztTQUMvRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFBO1NBQ3ZEO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQXNCO1FBQ2pFLElBQUk7WUFDQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3BDLE1BQU0sUUFBUSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtZQUcvRixJQUFHLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDO2dCQUMzQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDeEIsTUFBTSxjQUFJO3FCQUNULEtBQUssRUFBRTtxQkFDUCxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7cUJBQ3JDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDcEIsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLHFCQUFxQixFQUFDLENBQUMsQ0FBQzthQUN4RDtpQkFBSTtnQkFDRCxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDO2FBQzdEO1NBQ0o7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztTQUV4RDtJQUNMLENBQUM7Q0FDSjtBQXZERCxpQ0F1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJztcbmltcG9ydCB1c2VyIGZyb20gJ0FwcC9Nb2RlbHMvdXNlcic7XG5pbXBvcnQgTWFpbCBmcm9tICdAaW9jOkFkb25pcy9BZGRvbnMvTWFpbCdcblxuXG5pbXBvcnQgVXNlclZhbGlkYXRvciBmcm9tICdBcHAvVmFsaWRhdG9ycy9Vc2VyVmFsaWRhdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoQ29udHJvbGxlciB7XG4gICAgcHVibGljIGFzeW5jIHJlZ2lzdGVyKHtyZXF1ZXN0LHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoVXNlclZhbGlkYXRvcik7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gTWF0aC5mbG9vcigxMDAwICsgTWF0aC5yYW5kb20oKSAqIDkwMDApO1xuICAgICAgICAgICAgZGF0YS5vdHAgPSBjb2RlLnRvU3RyaW5nKCk7ICAgICAgICAgICAgXG4gICAgICAgICAgICBkYXRhLmlzX3ZlcmlmaWVkID0gMDsgICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHVzZXIuY3JlYXRlKGRhdGEpO1xuXG4gICAgICAgICAgICBhd2FpdCBNYWlsLnNlbmQoKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAuZnJvbSgnaW5mb0BleGFtcGxlLmNvbScpXG4gICAgICAgICAgICAgICAgICAudG8oZGF0YS5lbWFpbClcbiAgICAgICAgICAgICAgICAgIC5zdWJqZWN0KCdPVFAgVmVyaWZpY2F0aW9uIScpXG4gICAgICAgICAgICAgICAgICAuaHRtbFZpZXcoJ290cF92ZXJpZicsIHtjb2RlfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmNyZWF0ZWQoe21lc3NhZ2U6J0Jlcmhhc2lsIFJlZ2lzdGVyLCBTZWdlcmEgcGVyaWtzYSBlbWFpbCBhbmRhISd9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS51bnByb2Nlc3NhYmxlRW50aXR5KHttZXNzYWdlOiBlcnJvci5tZXNzYWdlfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBsb2dpbih7cmVxdWVzdCxyZXNwb25zZSwgYXV0aH06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZW1haWwgPSByZXF1ZXN0LmlucHV0KCdlbWFpbCcpO1xuICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSByZXF1ZXN0LmlucHV0KCdwYXNzd29yZCcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuJyk7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdHRlbXB0KGVtYWlsLHBhc3N3b3JkKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5vayh7bWVzc2FnZTogJ2xvZ2luIHN1a3NlcycsIHRva2VuOiB0b2tlbn0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6IGVycm9yLm1lc3NhZ2V9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG90cF92ZXJpZmljYXRpb24oe3JlcXVlc3QscmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG90cFVzZXIgPSByZXF1ZXN0LmlucHV0KCdvdHAnKVxuICAgICAgICAgICAgY29uc3QgZGF0YVVzZXIgPSBhd2FpdCBEYXRhYmFzZS5mcm9tKCd1c2VycycpLnNlbGVjdCgnKicpLndoZXJlKHtpZDogcmVxdWVzdC5pbnB1dCgndXNlcl9pZCcpfSlcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdvdHBVc2VyJytvdHBVc2VyKVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2RhdGFVc2VyLm90cCcrZGF0YVVzZXJbMF0ubmFtZSlcbiAgICAgICAgICAgIGlmKG90cFVzZXIgPT09IGRhdGFVc2VyWzBdLm90cCl7XG4gICAgICAgICAgICAgICAgZGF0YVVzZXJbMF0uaXNfdmVyaWZpZWQgPSAxO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGFVc2VyWzBdKVxuICAgICAgICAgICAgICAgIGF3YWl0IHVzZXJcbiAgICAgICAgICAgICAgICAucXVlcnkoKVxuICAgICAgICAgICAgICAgIC53aGVyZSgnaWQnLCByZXF1ZXN0LmlucHV0KCd1c2VyX2lkJykpXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShkYXRhVXNlclswXSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soe21lc3NhZ2U6ICdWZXJpZmlrYXNpIEJlcmhhc2lsJ30pO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6ICdWZXJpZmlrYXNpIEdhZ2FsJ30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6IGVycm9yLm1lc3NhZ2V9KTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxufVxuIl19