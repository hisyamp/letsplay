"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class UserValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            name: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(6)
            ]),
            role: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(2)
            ]),
            email: Validator_1.schema.string({}, [
                Validator_1.rules.unique({
                    table: 'users',
                    column: 'email'
                }),
            ]),
            password: Validator_1.schema.string({}, [
                Validator_1.rules.minLength(3)
            ])
        });
        this.messages = {
            required: "kolom input {{field}} wajib diisi",
            "name.minLength": "Input {{field}} harus lebih dari 4",
            "role.minLength": "Input {{field}} harus lebih dari 4",
            "password.unique": "password sudah terpakai",
        };
    }
}
exports.default = UserValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVzZXJWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyRUFBeUU7QUFHekUsTUFBcUIsYUFBYTtJQUNoQyxZQUFzQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQXFCdkMsV0FBTSxHQUFHLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBRTVCLElBQUksRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUM7Z0JBQ3JCLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzthQUNuQixDQUFDO1lBQ0YsSUFBSSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQztnQkFDckIsaUJBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ25CLENBQUM7WUFDRixLQUFLLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDO2dCQUV0QixpQkFBSyxDQUFDLE1BQU0sQ0FBQztvQkFDWCxLQUFLLEVBQUMsT0FBTztvQkFDYixNQUFNLEVBQUUsT0FBTztpQkFDaEIsQ0FBQzthQUNILENBQUM7WUFDRixRQUFRLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDO2dCQUN6QixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDbkIsQ0FBQztTQUNILENBQUMsQ0FBQTtRQWFNLGFBQVEsR0FBbUI7WUFDakMsUUFBUSxFQUFFLG1DQUFtQztZQUM3QyxnQkFBZ0IsRUFBRSxvQ0FBb0M7WUFDdEQsZ0JBQWdCLEVBQUUsb0NBQW9DO1lBQ3RELGlCQUFpQixFQUFFLHlCQUF5QjtTQUM3QyxDQUFBO0lBekRnRCxDQUFDO0NBMERuRDtBQTNERCxnQ0EyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2hlbWEsIEN1c3RvbU1lc3NhZ2VzLHJ1bGVzIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5pbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN0eDogSHR0cENvbnRleHRDb250cmFjdCkge31cblxuICAvKlxuICAgKiBEZWZpbmUgc2NoZW1hIHRvIHZhbGlkYXRlIHRoZSBcInNoYXBlXCIsIFwidHlwZVwiLCBcImZvcm1hdHRpbmdcIiBhbmQgXCJpbnRlZ3JpdHlcIiBvZiBkYXRhLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogMS4gVGhlIHVzZXJuYW1lIG11c3QgYmUgb2YgZGF0YSB0eXBlIHN0cmluZy4gQnV0IHRoZW4gYWxzbywgaXQgc2hvdWxkXG4gICAqICAgIG5vdCBjb250YWluIHNwZWNpYWwgY2hhcmFjdGVycyBvciBudW1iZXJzLlxuICAgKiAgICBgYGBcbiAgICogICAgIHNjaGVtYS5zdHJpbmcoe30sIFsgcnVsZXMuYWxwaGEoKSBdKVxuICAgKiAgICBgYGBcbiAgICpcbiAgICogMi4gVGhlIGVtYWlsIG11c3QgYmUgb2YgZGF0YSB0eXBlIHN0cmluZywgZm9ybWF0dGVkIGFzIGEgdmFsaWRcbiAgICogICAgZW1haWwuIEJ1dCBhbHNvLCBub3QgdXNlZCBieSBhbnkgb3RoZXIgdXNlci5cbiAgICogICAgYGBgXG4gICAqICAgICBzY2hlbWEuc3RyaW5nKHt9LCBbXG4gICAqICAgICAgIHJ1bGVzLmVtYWlsKCksXG4gICAqICAgICAgIHJ1bGVzLnVuaXF1ZSh7IHRhYmxlOiAndXNlcnMnLCBjb2x1bW46ICdlbWFpbCcgfSksXG4gICAqICAgICBdKVxuICAgKiAgICBgYGBcbiAgICovXG4gIHB1YmxpYyBzY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcblxuICAgIG5hbWU6IHNjaGVtYS5zdHJpbmcoe30sW1xuICAgICAgcnVsZXMubWluTGVuZ3RoKDYpXG4gICAgXSksXG4gICAgcm9sZTogc2NoZW1hLnN0cmluZyh7fSxbXG4gICAgICBydWxlcy5taW5MZW5ndGgoMilcbiAgICBdKSxcbiAgICBlbWFpbDogc2NoZW1hLnN0cmluZyh7fSxbXG4gICAgICAvLyBydWxlcy5lbWFpbCxcbiAgICAgIHJ1bGVzLnVuaXF1ZSh7XG4gICAgICAgIHRhYmxlOid1c2VycycsXG4gICAgICAgIGNvbHVtbjogJ2VtYWlsJ1xuICAgICAgfSksXG4gICAgXSksXG4gICAgcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcoe30sW1xuICAgICAgcnVsZXMubWluTGVuZ3RoKDMpXG4gICAgXSlcbiAgfSlcblxuICAvKipcbiAgICogQ3VzdG9tIG1lc3NhZ2VzIGZvciB2YWxpZGF0aW9uIGZhaWx1cmVzLiBZb3UgY2FuIG1ha2UgdXNlIG9mIGRvdCBub3RhdGlvbiBgKC4pYFxuICAgKiBmb3IgdGFyZ2V0aW5nIG5lc3RlZCBmaWVsZHMgYW5kIGFycmF5IGV4cHJlc3Npb25zIGAoKilgIGZvciB0YXJnZXRpbmcgYWxsXG4gICAqIGNoaWxkcmVuIG9mIGFuIGFycmF5LiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICoge1xuICAgKiAgICdwcm9maWxlLnVzZXJuYW1lLnJlcXVpcmVkJzogJ1VzZXJuYW1lIGlzIHJlcXVpcmVkJyxcbiAgICogICAnc2NvcmVzLioubnVtYmVyJzogJ0RlZmluZSBzY29yZXMgYXMgdmFsaWQgbnVtYmVycydcbiAgICogfVxuICAgKlxuICAgKi9cbiAgIHB1YmxpYyBtZXNzYWdlczogQ3VzdG9tTWVzc2FnZXMgPSB7XG4gICAgcmVxdWlyZWQ6IFwia29sb20gaW5wdXQge3tmaWVsZH19IHdhamliIGRpaXNpXCIsXG4gICAgXCJuYW1lLm1pbkxlbmd0aFwiOiBcIklucHV0IHt7ZmllbGR9fSBoYXJ1cyBsZWJpaCBkYXJpIDRcIixcbiAgICBcInJvbGUubWluTGVuZ3RoXCI6IFwiSW5wdXQge3tmaWVsZH19IGhhcnVzIGxlYmloIGRhcmkgNFwiLFxuICAgIFwicGFzc3dvcmQudW5pcXVlXCI6IFwicGFzc3dvcmQgc3VkYWggdGVycGFrYWlcIixcbiAgfVxufVxuIl19