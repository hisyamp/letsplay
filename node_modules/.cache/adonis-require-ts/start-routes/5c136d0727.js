"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.get('/', async () => {
    return { hello: 'world' };
});
Route_1.default.group(() => {
    Route_1.default.post('/register', 'AuthController.register');
    Route_1.default.post('/login', 'AuthController.login');
    Route_1.default.post('/verif_otp', 'AuthController.otp_verification');
}).prefix('api/v1');
Route_1.default.group(() => {
    Route_1.default.get('/venues', 'VenuesController.index');
    Route_1.default.get('/venue', 'VenuesController.index');
    Route_1.default.post('/venue', 'VenuesController.store');
    Route_1.default.get('/venue/:id/booking', 'VenuesController.show');
    Route_1.default.post('/venue/booking', 'VenuesController.newBooking');
    Route_1.default.put('/venue/:id', 'VenuesController.update');
    Route_1.default.get('/booking', 'BookingsController.index');
    Route_1.default.get('/schedule', 'BookingsController.schedules');
    Route_1.default.get('/booking/:id', 'BookingsController.showBooking');
    Route_1.default.put('/booking/:id/join', 'BookingsController.joinBooking');
    Route_1.default.put('/booking/:id/unjoin', 'BookingsController.unjoinBooking');
    Route_1.default.get('/', async ({ response }) => {
        return response.send({ message: 'Welcome to Adonis' });
    });
}).prefix('api/v1').middleware('auth');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBb0JBLG9GQUEwQztBQUUxQyxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN4QixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBQzNCLENBQUMsQ0FBQyxDQUFBO0FBRUYsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7SUFDZixlQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSx5QkFBeUIsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLHNCQUFzQixDQUFDLENBQUE7SUFDNUMsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsaUNBQWlDLENBQUMsQ0FBQTtBQUM3RCxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDcEIsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7SUFDZixlQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFBO0lBQzlDLGVBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDN0MsZUFBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsd0JBQXdCLENBQUMsQ0FBQTtJQUM5QyxlQUFLLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLHVCQUF1QixDQUFDLENBQUE7SUFDeEQsZUFBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSw2QkFBNkIsQ0FBQyxDQUFBO0lBQzNELGVBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLHlCQUF5QixDQUFDLENBQUE7SUFFbEQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsMEJBQTBCLENBQUMsQ0FBQTtJQUNqRCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSw4QkFBOEIsQ0FBQyxDQUFBO0lBQ3RELGVBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGdDQUFnQyxDQUFDLENBQUE7SUFDM0QsZUFBSyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFBO0lBQ2hFLGVBQUssQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsa0NBQWtDLENBQUMsQ0FBQTtJQUVuRSxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUE7SUFDeEQsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBSb3V0ZXNcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufFxufCBUaGlzIGZpbGUgaXMgZGVkaWNhdGVkIGZvciBkZWZpbmluZyBIVFRQIHJvdXRlcy4gQSBzaW5nbGUgZmlsZSBpcyBlbm91Z2hcbnwgZm9yIG1ham9yaXR5IG9mIHByb2plY3RzLCBob3dldmVyIHlvdSBjYW4gZGVmaW5lIHJvdXRlcyBpbiBkaWZmZXJlbnRcbnwgZmlsZXMgYW5kIGp1c3QgbWFrZSBzdXJlIHRvIGltcG9ydCB0aGVtIGluc2lkZSB0aGlzIGZpbGUuIEZvciBleGFtcGxlXG58XG58IERlZmluZSByb3V0ZXMgaW4gZm9sbG93aW5nIHR3byBmaWxlc1xufCDilJzilIDilIAgc3RhcnQvcm91dGVzL2NhcnQudHNcbnwg4pSc4pSA4pSAIHN0YXJ0L3JvdXRlcy9jdXN0b21lci50c1xufFxufCBhbmQgdGhlbiBpbXBvcnQgdGhlbSBpbnNpZGUgYHN0YXJ0L3JvdXRlcy50c2AgYXMgZm9sbG93c1xufFxufCBpbXBvcnQgJy4vcm91dGVzL2NhcnQnXG58IGltcG9ydCAnLi9yb3V0ZXMvY3VzdG9tZXInXG58XG4qL1xuXG5pbXBvcnQgUm91dGUgZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Sb3V0ZSdcblxuUm91dGUuZ2V0KCcvJywgYXN5bmMgKCkgPT4ge1xuICByZXR1cm4geyBoZWxsbzogJ3dvcmxkJyB9XG59KVxuIFxuUm91dGUuZ3JvdXAoKCkgPT4ge1xuICBSb3V0ZS5wb3N0KCcvcmVnaXN0ZXInLCAnQXV0aENvbnRyb2xsZXIucmVnaXN0ZXInKVxuICBSb3V0ZS5wb3N0KCcvbG9naW4nLCAnQXV0aENvbnRyb2xsZXIubG9naW4nKVxuICBSb3V0ZS5wb3N0KCcvdmVyaWZfb3RwJywgJ0F1dGhDb250cm9sbGVyLm90cF92ZXJpZmljYXRpb24nKVxufSkucHJlZml4KCdhcGkvdjEnKTtcblJvdXRlLmdyb3VwKCgpID0+IHtcbiAgUm91dGUuZ2V0KCcvdmVudWVzJywgJ1ZlbnVlc0NvbnRyb2xsZXIuaW5kZXgnKVxuICBSb3V0ZS5nZXQoJy92ZW51ZScsICdWZW51ZXNDb250cm9sbGVyLmluZGV4JylcbiAgUm91dGUucG9zdCgnL3ZlbnVlJywgJ1ZlbnVlc0NvbnRyb2xsZXIuc3RvcmUnKVxuICBSb3V0ZS5nZXQoJy92ZW51ZS86aWQvYm9va2luZycsICdWZW51ZXNDb250cm9sbGVyLnNob3cnKVxuICBSb3V0ZS5wb3N0KCcvdmVudWUvYm9va2luZycsICdWZW51ZXNDb250cm9sbGVyLm5ld0Jvb2tpbmcnKVxuICBSb3V0ZS5wdXQoJy92ZW51ZS86aWQnLCAnVmVudWVzQ29udHJvbGxlci51cGRhdGUnKVxuXG4gIFJvdXRlLmdldCgnL2Jvb2tpbmcnLCAnQm9va2luZ3NDb250cm9sbGVyLmluZGV4JylcbiAgUm91dGUuZ2V0KCcvc2NoZWR1bGUnLCAnQm9va2luZ3NDb250cm9sbGVyLnNjaGVkdWxlcycpXG4gIFJvdXRlLmdldCgnL2Jvb2tpbmcvOmlkJywgJ0Jvb2tpbmdzQ29udHJvbGxlci5zaG93Qm9va2luZycpXG4gIFJvdXRlLnB1dCgnL2Jvb2tpbmcvOmlkL2pvaW4nLCAnQm9va2luZ3NDb250cm9sbGVyLmpvaW5Cb29raW5nJylcbiAgUm91dGUucHV0KCcvYm9va2luZy86aWQvdW5qb2luJywgJ0Jvb2tpbmdzQ29udHJvbGxlci51bmpvaW5Cb29raW5nJylcbiAgXG4gICBSb3V0ZS5nZXQoJy8nLCBhc3luYyAoeyByZXNwb25zZSB9KSA9PiB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnNlbmQoeyBtZXNzYWdlOiAnV2VsY29tZSB0byBBZG9uaXMnIH0pXG4gIH0pXG59KS5wcmVmaXgoJ2FwaS92MScpLm1pZGRsZXdhcmUoJ2F1dGgnKTtcbiJdfQ==